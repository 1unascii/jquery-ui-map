#summary Sample code

= Version 3.0-alpha =

== Example constructor call ==

Make the selected element a Google map.

{{{
$('#map_canvas').gmap();
}}}

Map options are added in the constructor or set with the option method

{{{
$('#map_canvas').gmap({ 'center': '42.345573,-71.098326' });
}}}

When the map is initialized it will trigger the 'init' event.

{{{
$('#map_canvas').gmap().bind('init', function(event, map) { 
	// do something																									  
});
}}}

All properties in the [http://code.google.com/intl/sv-SE/apis/maps/documentation/javascript/reference.html#MapOptions MapOption] object can be set and retrieved by

Get the zoom
{{{
var zoom = $('#map_canvas').gmap('option', 'zoom');
}}}

Set the zoom
{{{
$('#map_canvas').gmap('option', 'zoom', 7);
}}}

== Example add custom control ==

{{{
$('#map_canvas').gmap().bind('init', function() { 
	$('#map_canvas').gmap('addControl', 'control', google.maps.ControlPosition.LEFT_TOP);																										  
});
}}}

== Example add marker ==

The position can be set with a string representation of a latitude/longitude ('xx.xx,xx.xx') or with a google.maps.LatLng().
If you set the property bounds to true the map will calculate the viewport and zoom automagically :)

{{{
$('#map_canvas').gmap().bind('init', function(evt, map) { 
	$('#map_canvas').gmap('addMarker', { 'position': '42.345573,-71.098326', 'bounds': true } );																										  
});
}}}

== Example InfoWindow ==

The first method will only have one InfoWindow up at all time

{{{
$('#map_canvas').gmap().bind('init', function() { 
	$('#map_canvas').gmap('addMarker', { 'position':  '42.345573,-71.098326', 'bounds': true }).click(function() {
		$('#map_canvas').gmap('openInfoWindow', { 'content': 'TEXT_AND_HTML_IN_INFOWINDOW' }, this);
	});                                                                                                                                                                                                                               
});
}}}

The second method will be able to show as many open InfoWindows as you want

{{{
$('#map_canvas').gmap().bind('init', function() { 
	$('#map_canvas').gmap('addMarker', { 'position':  '42.345573,-71.098326', 'bounds': true }, function(map, marker){
		$('#map_canvas').gmap('addInfoWindow', { 'content': 'TEXT_AND_HTML_IN_INFOWINDOW' }, function(iw) {
			$(marker).click(function() {
				iw.open(map, marker);
			});																												  
		});
	});
});
}}}

== Example add markers with JSON ==

{{{
$('#map_canvas').gmap().bind('init', function(evt, map) { 
	$.getJSON( 'http://jquery-ui-map.googlecode.com/svn/trunk/demos/json.json', 'category=activity', function(data) { 
		$.each( data.markers, function(i, m) {
			$('#map_canvas').gmap('addMarker', { 'position': new google.maps.LatLng(m.lat, m.lng), 'bounds':true } );
		});
	});																											  
});
}}}

== Example displayDirections ==

{{{
$('#map_canvas').gmap().bind('init', function(evt, map) { 
	$('#map_canvas').gmap('displayDirections', { 'origin': 'Los Angeles, USA', 'destination': 'New York, USA', 'travelMode': google.maps.DirectionsTravelMode.DRIVING }, { 'panel': document.getElementById('panel') }, function(result, status) {
		if ( status === 'OK' ) {
			alert('Results found!');
		}
	});																											  
});
}}}

== Example display StreetView ==

{{{
$('#map_canvas').gmap({'center': '42.345573,-71.098326'}).bind('init', function(evt, map) { 
	$('#map_canvas').gmap('displayStreetView', 'panel', { 'position': map.getCenter(), 'pov': {'heading': 34, 'pitch': 10, 'zoom': 1 } });
});
}}}

== Example filter tags, categories, etc with findMarker ==

{{{
$('#map_canvas').gmap().bind('init', function() { 
	$('#map_canvas').gmap('addMarker', { 'tags':'dog,cat,banana', 'position': '42.345573,-71.098326', 'bounds':true });
	$('#map_canvas').gmap('addMarker', { 'tags':'dog,car,monkey', 'position': '52.345573,-71.098326', 'bounds':true });
	$('#map_canvas').gmap('findMarker', 'tags', 'monkey', ',', function(isFound, marker) {
		if ( isFound ) {
			marker.setVisible(true);
		} else {
			marker.setVisible(false);
		}
	});
});
}}}

== Example loadMetadata ==

{{{
$('#map_canvas').gmap().bind('init', function() { 
	$('#map_canvas').gmap('loadMetadata', 'microformat', 'vevent', function(i, item, data) {
		$('#map_canvas').gmap('addMarker', { 'position': new google.maps.LatLng(data.latitude.title, data.longitude.title), 'bounds': true });
	});
});
}}}

== Example KML/GeoRSS ==

{{{
$('#map_canvas').gmap().bind('init', function() { 
	$('#map_canvas').gmap('loadKML', 'dog_feed_1', 'http://api.flickr.com/services/feeds/geo/?g=322338@N20&lang=en-us&format=feed-georss');
});
}}}

== Example using [http://google-maps-utility-library-v3.googlecode.com/svn/tags/markerclusterer/ MarkerClusterer] or [http://google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/ MarkerClustererPlus] ==

{{{
$('#map_canvas').gmap().bind('init', function() { 
	// add markers here ...
	$('#map_canvas').gmap('set', 'MarkerClusterer', new MarkerClusterer($('#map_canvas').gmap('get', 'map'), $('#map_canvas').gmap('get', 'markers')));
	// to do something with the MarkerClusterer, just call $('#map_canvas').gmap('get', 'MarkerClusterer');
});
}}}

== Search ==

{{{
$('#map_canvas').gmap('search', { 'address': 'Stockholm' }, function(results, status) {
    if ( status === 'OK' )
		$('#map_canvas').gmap('get', 'map').panTo(results[0].geometry.location);
});
}}}

== Clear markers ==

{{{
$('#map_canvas').gmap('clear', 'markers');
}}}

== Example destroy ==

{{{
$('#map_canvas').gmap('destroy');
}}}

== Get markers, services, and more ==

{{{
// Returns all markers
$('#map_canvas').gmap('get', 'markers');
}}}

{{{
// Get all services
$('#map_canvas').gmap('get', 'services');
// Get a specific service implementation
$('#map_canvas').gmap('get', 'services').GeoCoder
}}}

{{{
// Get all overlays
$('#map_canvas').gmap('get', 'overlays');
// Get a specific overlay implementation, see the loadKML example
$('#map_canvas').gmap('get', 'overlays').dog_feed_1;
}}}

{{{
// Get bounds
$('#map_canvas').gmap('get', 'bounds');
// Clear bounds
$('#map_canvas').gmap('set', 'bounds', null);
}}}