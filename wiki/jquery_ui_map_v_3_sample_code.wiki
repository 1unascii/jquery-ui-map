#summary Sample code

= Version 3.0-alpha =

== Example constructor call ==

Make the selected element a Google map.

{{{
$('#map_canvas').gmap();
}}}

or add some options.

{{{
$('#map_canvas').gmap({ 'center': '42.345573,-71.098326' });
}}}

== Example add custom control ==

{{{
$('#map_canvas').gmap().bind('init', function() { 
	$('#map_canvas').gmap('addControl', 'control', google.maps.ControlPosition.LEFT_TOP);																										  
});
}}}

== Example add marker ==

The position can be set with a string representation of a latitude/longitude ('xx.xx,xx.xx') or with a google.maps.LatLng().
If you set the property bounds to true the map will calculate the viewport and zoom automagically :)

{{{
$('#map_canvas').gmap().bind('init', function(evt, map) { 
	$('#map_canvas').gmap('addMarker', { 'position': '42.345573,-71.098326', 'bounds': true } );																										  
});
}}}

== Example InfoWindow ==

The first method will only have one InfoWindow up at all time

{{{
$('#map_canvas').gmap({'center': '42.345573,-71.098326'}).bind('init', function(evt, map) { 
	$('#map_canvas').gmap('addMarker', { 'position':  map.getCenter() }).click(function() {
		$('#map_canvas').gmap('openInfoWindow', { 'content': 'TEXT_AND_HTML_IN_INFOWINDOW' }, $(this)[0]);
	});																												  
});
}}}

The second method will be able to show as many open InfoWindows as you want

{{{
$('#map_canvas').gmap({'center': '42.345573,-71.098326'}).bind('init', function(evt, map) { 
	$('#map_canvas').gmap('addMarker', { 'position':  map.getCenter() }, function(map, marker){
		$('#map_canvas').gmap('addInfoWindow', { 'content': 'TEXT_AND_HTML_IN_INFOWINDOW' }, function(iw) {
			$(marker).click(function() {
				iw.open(map, marker);
			});																												  
		});
	});
});
}}}

== Example add markers with JSON ==

{{{
$('#map_canvas').gmap().bind('init', function(evt, map) { 
	$.getJSON( 'http://jquery-ui-map.googlecode.com/svn/trunk/demos/json.json', 'category=activity', function(data) { 
		$.each( data.markers, function(i, m) {
			$('#map_canvas').gmap('addMarker', { 'position': new google.maps.LatLng(m.lat, m.lng), 'bounds':true } );
		});
	});																											  
});
}}}

== Example displayDirections ==

{{{
$('#map_canvas').gmap().bind('init', function(evt, map) { 
	$('#map_canvas').gmap('displayDirections', { 'origin': 'Los Angeles, USA', 'destination': 'New York, USA', 'travelMode': google.maps.DirectionsTravelMode.DRIVING }, { 'panel': document.getElementById('panel') }, function(result, status) {
		if ( status === 'OK' ) {
			alert('Results found!');
		}
	});																											  
});
}}}

== Example display StreetView ==

{{{
$('#map_canvas').gmap({'center': '42.345573,-71.098326'}).bind('init', function(evt, map) { 
	$('#map_canvas').gmap('displayStreetView', 'panel', { 'position': map.getCenter(), 'pov': {'heading': 34, 'pitch': 10, 'zoom': 1 } });
});
}}}

== Example filter tags, categories, etc with findMarker ==

{{{
$('#map_canvas').gmap().bind('init', function() { 
	$('#map_canvas').gmap('addMarker', { 'tags':'dog,cat,banana', 'position': '42.345573,-71.098326', 'bounds':true });
	$('#map_canvas').gmap('addMarker', { 'tags':'dog,car,monkey', 'position': '52.345573,-71.098326', 'bounds':true });
	$('#map_canvas').gmap('findMarker', 'tags', 'monkey', ',', function(isFound, marker) {
		if ( isFound ) {
			marker.setVisible(true);
		} else {
			marker.setVisible(false);
		}
	});
});
}}}

== Example loadMetadata ==

{{{
$('#map_canvas').gmap().bind('init', function() { 
	$('#map_canvas').gmap('loadMetadata', 'microformat', 'vevent', function(i, item, data) {
		$('#map_canvas').gmap('addMarker', { 'position': new google.maps.LatLng(data.latitude.title, data.longitude.title), 'bounds': true });
	});
});
}}}

== Example KML/GeoRSS ==

{{{
$('#map_canvas').gmap().bind('init', function() { 
	$('#map_canvas').gmap('loadKML', 'dog_feed_1', 'http://api.flickr.com/services/feeds/geo/?g=322338@N20&lang=en-us&format=feed-georss');
});
}}}

== Example using [http://google-maps-utility-library-v3.googlecode.com/svn/tags/markerclusterer/ MarkerClusterer] or [http://google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/ MarkerClustererPlus] ==

{{{
$('#map_canvas').gmap().bind('init', function() { 
	// add markers here ...
	$('#map_canvas').gmap('set', 'MarkerClusterer', new MarkerClusterer($('#map_canvas').gmap('get', 'map'), $('#map_canvas').gmap('get', 'markers')));
	// to do something with the MarkerClusterer, just call $('#map_canvas').gmap('get', 'MarkerClusterer');
});
}}}

== Search ==

{{{
$('#map_canvas').gmap('search', { 'address': 'Stockholm' }, function(results, status) {
    if ( status === 'OK' )
		$('#map_canvas').gmap('get', 'map').panTo(results[0].geometry.location);
});
}}}

== Clear markers ==

{{{
$('#map_canvas').gmap('clear', 'markers');
}}}

== Example destroy ==

{{{
$('#map_canvas').gmap('destroy');
}}}


== Example get user position ==

Retrieving the clinet position can be accomplished by several ways, i.e. through 
  * [https://developer.mozilla.org/en/using_geolocation Geolocation]
  * [http://code.google.com/intl/sv-SE/apis/loader/ Google loader]
  * [http://code.google.com/intl/sv-SE/apis/gears/api_geolocation.html Google gears]
  * Web services 

This example will show how to implement navigator.geolocation using google loader as a fallback.

First, create a file called jquery.ui.map.extensions.js. Paste this code and save the file,
you should minify the javascript before you use it in production:

{{{
  /*!
 * jQuery UI Google Map 2.1
 * http://code.google.com/p/jquery-ui-map/
 * Copyright (c) 2010 - 2011 Johan SÃ¤ll Larsson
 * Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
 */
( function($) {

	$.extend($.ui.gmap.prototype, {
		 
		/**
		 * Gets the current position
		 * @a: function(status, position)
		 * @b:object, see https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIDOMGeoPositionOptions
		 */
		getCurrentPosition: function(a, b) {
			if ( navigator.geolocation ) {
				navigator.geolocation.getCurrentPosition ( 
					function(position) {
						$.ui.gmap._trigger(a, "OK", position);
					}, 
					function(error) {
						$.ui.gmap._trigger(a, error, null);
					}, 
					b 
				);	
			} else {
				$.ui.gmap._trigger(a, "NOT_SUPPORTED", null);
			}
		}
	
	});
	
} (jQuery) );

}}}

This code will extend the current jquery.ui.map plugin so that you may use the method "getCurrentPosition"
like any other method in the plugin wrapper. 

== Using the extension with jQuery mobile == 

The example assumes that your page div (with ID 'gmap-3') will look like this

{{{
<div id="gmap-3" data-role="page">
    ...
</div>
}}}

Add the javascript

{{{

<script type="text/javascript">

	// When the page show try to get the user's location
	$('#gmap-3').live("pageshow", function() {
		// Set the map to some default center
		$('#map_canvas').gmap({'center': getLatLng()});
		// Try to get the user's position
		$('#map_canvas').gmap('getCurrentPosition', function(status, position) {
			if ( status === 'OK' ) {
				$('#map_canvas').gmap({'center': new google.maps.LatLng(position.coords.latitude, position.coords.longitude)});
				$('#from').val(position.coords.latitude+ ','+position.coords.longitude);
			} else {
				// do some error handling
			}
		});
		
		// Get the google loaders client location
		// If it fails, return some defult value
		function getLatLng() {
			if ( google.loader.ClientLocation != null )
				return new google.maps.LatLng(google.loader.ClientLocation.latitude, google.loader.ClientLocation.longitude);	
			return new google.maps.LatLng(59.3426606750, 18.0736160278);
		}
		
	});
	
	// Bind the click event to the  displayDirections function so that 
	// whenever a user clicks on the 'submit' button it will call and show directions
	$('#gmap-3').live("pagecreate", function() {
		$('#submit').click(function() {
			$('#map_canvas').gmap('displayDirections', { 'origin': $('#from').val(), 'destination': $('#to').val(), 'travelMode': google.maps.DirectionsTravelMode.DRIVING }, { 'panel': document.getElementById('directions')}, function(success, response) {
				if ( success ) {
					$('#results').show();
				} else {
					$('#results').hide();
				}
			});
			return false;
		});
	});
</script>

}}}

Add the html

{{{

<div>	
	<!-- The map will be loaded here, set width and height in the css to the map_canvas element -->
	<div id="map_canvas" style="height:300px;width:300px;"></div>
	<!-- The javascript will set the from ID -->
	<p style="display:none;">
		<label for="from">From</label>
		<input id="from" type="hidden" class="ui-bar-c" value="" />
	</p>
	<!-- The user will set the 'to' field -->
	<p>
		<label for="to">To</label>
		<input id="to" class="ui-bar-c" value="Stockholm, Sweden" />
	</p>
	<a id="submit" href="#" data-role="button" data-icon="search">Get directions</a>
</div>

<!-- results will ony show if there is a result to show -->
<div id="results" style="display:none;">
	<!-- the directions will be loaded in the directions div -->
	<div id="directions"></div>
</div>

}}}